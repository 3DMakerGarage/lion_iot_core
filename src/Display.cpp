/*
 * Copyright 3D Maker Garage 2024
 *
 * This file is part of some open source application.
 *
 * Licensed to the Apache Software Foundation (ASF) under one
 * or more contributor license agreements.  See the NOTICE file
 * distributed with this work for additional information
 * regarding copyright ownership.  The ASF licenses this file
 * to you under the Apache License, Version 2.0 (the
 * "License"); you may not use this file except in compliance
 * with the License.  You may obtain a copy of the License at
 *
 *   http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing,
 * software distributed under the License is distributed on an
 * "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
 * KIND, either express or implied.  See the License for the
 * specific language governing permissions and limitations
 * under the License.
 *
 * Contact: 3dmakergarage@gmail.com
 */

#include <Display.h>

const unsigned char logo [] PROGMEM = {
	0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 
	0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 
	0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 
	0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 
	0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 
	0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 
	0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 
	0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 
	0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 
	0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 
	0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 
	0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 
	0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 
	0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 
	0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 
	0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 
	0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xf0, 0x7f, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 
	0xf8, 0x03, 0xff, 0xff, 0xff, 0x80, 0x3f, 0xff, 0x80, 0x0f, 0xff, 0xc0, 0x00, 0x00, 0x1f, 0xff, 
	0xf8, 0x03, 0xff, 0xff, 0xff, 0x80, 0x3f, 0xfe, 0x00, 0x03, 0xff, 0xc0, 0x00, 0x00, 0x0f, 0xff, 
	0xf8, 0x03, 0xff, 0xff, 0xff, 0x80, 0x3f, 0xf8, 0x00, 0x00, 0xff, 0xc0, 0x00, 0x00, 0x07, 0xff, 
	0xf8, 0x03, 0xff, 0xff, 0xff, 0x80, 0x3f, 0xf0, 0x00, 0x00, 0x7f, 0xc0, 0x00, 0x00, 0x03, 0xff, 
	0xf8, 0x03, 0xff, 0xff, 0xff, 0x80, 0x3f, 0xe0, 0x00, 0x00, 0x3f, 0xc0, 0x00, 0x00, 0x01, 0xff, 
	0xf8, 0x03, 0xff, 0xff, 0xff, 0x80, 0x3f, 0xc0, 0x00, 0x00, 0x1f, 0xc0, 0x00, 0x00, 0x00, 0xff, 
	0xf8, 0x03, 0xff, 0xff, 0xff, 0x80, 0x3f, 0x80, 0x00, 0x00, 0x0f, 0xc0, 0x00, 0x00, 0x00, 0x7f, 
	0xf8, 0x03, 0xff, 0xff, 0xff, 0x80, 0x3f, 0x00, 0x00, 0x00, 0x0f, 0xc0, 0x00, 0x00, 0x00, 0x3f, 
	0xf8, 0x03, 0xff, 0xff, 0xff, 0x80, 0x3f, 0x00, 0x0f, 0x80, 0x07, 0xc0, 0x00, 0x00, 0x00, 0x3f, 
	0xf8, 0x03, 0xff, 0xff, 0xff, 0x80, 0x3e, 0x00, 0x3f, 0xe0, 0x07, 0xff, 0xff, 0xff, 0x80, 0x1f, 
	0xf8, 0x03, 0xff, 0xff, 0xff, 0x80, 0x3e, 0x00, 0x7f, 0xf0, 0x07, 0xff, 0xff, 0xff, 0xc0, 0x1f, 
	0xf8, 0x03, 0xff, 0xff, 0xff, 0x80, 0x3c, 0x00, 0xff, 0xf0, 0x03, 0xff, 0xff, 0xff, 0xc0, 0x1f, 
	0xf8, 0x03, 0xff, 0xff, 0xff, 0x80, 0x3c, 0x01, 0xff, 0xf8, 0x03, 0xff, 0xff, 0xff, 0xc0, 0x1f, 
	0xf8, 0x03, 0xff, 0xff, 0xff, 0x80, 0x38, 0x01, 0xff, 0xfc, 0x01, 0xff, 0xff, 0xff, 0xc0, 0x1f, 
	0xf8, 0x03, 0xff, 0xff, 0xff, 0x80, 0x38, 0x03, 0xff, 0xfc, 0x01, 0xff, 0xff, 0xff, 0xc0, 0x1f, 
	0xf8, 0x03, 0xff, 0xff, 0xff, 0x80, 0x38, 0x03, 0xff, 0xfc, 0x01, 0xff, 0xff, 0xff, 0xc0, 0x1f, 
	0xf8, 0x03, 0xff, 0xff, 0xff, 0x80, 0x38, 0x03, 0xff, 0xfc, 0x01, 0xff, 0xff, 0xff, 0xc0, 0x1f, 
	0xf8, 0x03, 0xff, 0xff, 0xff, 0x80, 0x38, 0x03, 0xff, 0xfc, 0x01, 0xff, 0xff, 0xff, 0xc0, 0x1f, 
	0xf8, 0x03, 0xff, 0xff, 0xff, 0x80, 0x38, 0x03, 0xff, 0xfc, 0x03, 0xff, 0xff, 0xff, 0xc0, 0x1f, 
	0xf8, 0x03, 0xff, 0xff, 0xff, 0x80, 0x3c, 0x01, 0xff, 0xf8, 0x03, 0xff, 0xff, 0xff, 0xc0, 0x1f, 
	0xf8, 0x03, 0xff, 0xff, 0xff, 0x80, 0x3c, 0x01, 0xff, 0xf8, 0x03, 0xff, 0xff, 0xff, 0xc0, 0x1f, 
	0xf8, 0x03, 0xff, 0xff, 0xff, 0x80, 0x3c, 0x00, 0xff, 0xf8, 0x07, 0xff, 0xff, 0xff, 0xc0, 0x1f, 
	0xf8, 0x01, 0xff, 0xff, 0xff, 0x80, 0x3e, 0x00, 0x7f, 0xe0, 0x07, 0xff, 0xff, 0xff, 0xc0, 0x1f, 
	0xf8, 0x00, 0x00, 0x00, 0x03, 0x80, 0x3e, 0x00, 0x1f, 0x00, 0x07, 0xff, 0xff, 0xff, 0xc0, 0x1f, 
	0xf8, 0x00, 0x00, 0x00, 0x03, 0x80, 0x3f, 0x00, 0x00, 0x00, 0x0f, 0xff, 0xff, 0xff, 0xc0, 0x1f, 
	0xfc, 0x00, 0x00, 0x00, 0x03, 0x80, 0x3f, 0x80, 0x00, 0x00, 0x0f, 0xff, 0xff, 0xff, 0xc0, 0x1f, 
	0xfe, 0x00, 0x00, 0x00, 0x03, 0x80, 0x3f, 0xc0, 0x00, 0x00, 0x1f, 0xff, 0xff, 0xff, 0xc0, 0x1f, 
	0xff, 0x00, 0x00, 0x00, 0x03, 0x80, 0x3f, 0xe0, 0x00, 0x00, 0x3f, 0xff, 0xff, 0xff, 0xc0, 0x1f, 
	0xff, 0x80, 0x00, 0x00, 0x03, 0x80, 0x3f, 0xf0, 0x00, 0x00, 0x7f, 0xff, 0xff, 0xff, 0xc0, 0x1f, 
	0xff, 0xc0, 0x00, 0x00, 0x03, 0x80, 0x3f, 0xf8, 0x00, 0x00, 0xff, 0xff, 0xff, 0xff, 0xc0, 0x1f, 
	0xff, 0xe0, 0x00, 0x00, 0x03, 0x80, 0x3f, 0xfc, 0x00, 0x07, 0xff, 0xff, 0xff, 0xff, 0xc0, 0x1f, 
	0xff, 0xf0, 0x00, 0x00, 0x03, 0x80, 0x3f, 0xff, 0x00, 0x07, 0xff, 0xff, 0xff, 0xff, 0xc0, 0x1f, 
	0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xf0, 0x3f, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 
	0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 
	0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 
	0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 
	0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 
	0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 
	0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 
	0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 
	0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 
	0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 
	0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 
	0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 
	0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 
	0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 
	0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff
};

Display::Display() {
    SSD1306 = Adafruit_SSD1306(DISPLAY_WIDTH, DISPLAY_HEIGHT);
}

void Display::display_begin() {
    if (SSD1306.begin(SSD1306_SWITCHCAPVCC, SCREEN_I2C_ADDRESS)) {
        SSD1306.clearDisplay();
        SSD1306.setTextSize(3);
        SSD1306.setTextColor(WHITE);
        SSD1306.setTextWrap(false);
        SSD1306.setCursor(0, 0);
        SSD1306.display();
		delay(100);
    }
}

void Display::display_drawLogo() {
    SSD1306.drawBitmap(0, 0, logo, 128, 64, BLACK, WHITE);
}

void Display::display_clear() {
    SSD1306.clearDisplay();
}

void Display::display_setBrightness(int8 value) {
    SSD1306.ssd1306_command(SSD1306_SETCONTRAST);
    SSD1306.ssd1306_command(value);
    delay(100);
}

void Display::display_writeText(String text) {
    Display::display_writeText(0, 0, DEFAULT_TEXT_SIZE, text);
 }

void Display::display_writeText(int16_t x, int16_t y, String text) {
    Display::display_writeText(x, y, DEFAULT_TEXT_SIZE, text);
}

void Display::display_writeText(int16_t x, int16_t y, int16_t size, String text) {
    SSD1306.setCursor(x, y);
    SSD1306.setTextSize(size);
    SSD1306.println(text);
}

void Display::display_getTextBounds(int16_t *size, String *text, uint16_t *textWidth, uint16_t *textHeight) {
    int16_t centeredX;
    int16_t centeredY;
    SSD1306.setTextSize(*size);
    SSD1306.getTextBounds(*text, 0, 0, &centeredX, &centeredY, textWidth, textHeight);
}

void Display::display_writeAlignedText(int16_t size, String text) {
	display_writeAlignedText(CENTER, MIDDLE, size, text);
}

void Display::display_writeAlignedText(
	HorizontalAlignment horizonatlAlignment,
	VerticalAlignment verticalAlignment, 
	int16_t size,
	String text
) {
	int16_t x;
	int16_t y;
	uint16_t textWidth;
	uint16_t textHeight;
	display_getTextBounds(&size, &text, &textWidth, &textHeight);
	switch (horizonatlAlignment) {
		case HorizontalAlignment::CENTER:
			x = ((DISPLAY_WIDTH - textWidth) / 2);
			break;
		case HorizontalAlignment::RIGHT:
			x = (DISPLAY_WIDTH - textWidth);
			break;
		default:
			x = 0;
			break;
	}
	switch (verticalAlignment) {
		case VerticalAlignment::MIDDLE:
			y = ((DISPLAY_HEIGHT - textHeight) / 2);
			break;
		case VerticalAlignment::BOTTOM:
			y = (DISPLAY_HEIGHT - textHeight);
			break;
		default:
			y = 0;
			break;
	}
	display_writeText(x, y, size, text);
}
		
void Display::display_writeText(char character) {
    Display::display_writeText(0, 0, DEFAULT_TEXT_SIZE, character);
 }

void Display::display_writeText(int16_t x, int16_t y, char character) {
    Display::display_writeText(x, y, DEFAULT_TEXT_SIZE, character);
}

void Display::display_writeText(int16_t x, int16_t y, int16_t size, char character) {
    SSD1306.setCursor(x, y);
    SSD1306.setTextSize(size);
    SSD1306.print(character);
}

void Display::display_drawPixel(int16_t x, int16_t y) {
    SSD1306.drawPixel(x, y, WHITE);
}

void Display::display_drawFile(String filePath, int x, int y, int width, int height) {
    int imageSizeInBytes = ((width * height) / 8);
    uint8_t originBuffer[imageSizeInBytes];
    readFile(filePath, originBuffer);

    SSD1306.clearDisplay();
    SSD1306.drawBitmap(x, y, (const uint8_t*)originBuffer, DISPLAY_WIDTH, DISPLAY_HEIGHT, WHITE);
}

void Display::display_draw() {
    SSD1306.display();
}

/*
    IMPORTANT: The file must have its rows order flipped.
*/
void Display::readFile(String filePath, uint8_t* buffer, int size) {
    File file = LittleFS.open(filePath, "r");
    int seek = file.size() - size - 2;
    file.seek(seek);
    file.read(buffer, size);
    file.close();
}

void Display::display_turnOn() {
    SSD1306.ssd1306_command(SSD1306_DISPLAYON);
    delay(100);
}

void Display::display_turnOff() {
    SSD1306.ssd1306_command(SSD1306_DISPLAYOFF);
    delay(100);
}

void Display::display_drawRoundedRect(int x, int y, int width, int height, int radious) {
    SSD1306.drawRoundRect(x, y, width, height, radious, WHITE);
}

void Display::display_fillRoundedRect(int x, int y, int width, int height, int radious) {
    SSD1306.fillRoundRect(x, y, width, height, radious, WHITE);
}